import React, { useState, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Search, Filter, X, ChevronDown, ChevronUp } from 'lucide-react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { useDebounce } from 'react-use'\nimport { Input } from '../ui/Input'\nimport { Button } from '../ui/Button'\nimport { Badge } from '../ui/Badge'\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card'\nimport { updateFilters, clearFilters } from '../../store/slices/filterSlice'\nimport { RootState } from '../../store'\nimport { SearchFilters as SearchFiltersType } from '../../types'\nimport { cn } from '../../utils/cn'\n\ninterface SearchFiltersProps {\n  availableFilters?: {\n    brands: string[]\n    categories: string[]\n    priceRange: { min: number; max: number }\n    powerRange: { min: number; max: number }\n  }\n  onFiltersChange?: (filters: SearchFiltersType) => void\n  className?: string\n}\n\nconst CATEGORY_OPTIONS = [\n  { value: 'sport', label: '运动型', color: 'motor' },\n  { value: 'touring', label: '旅行车', color: 'touring' },\n  { value: 'cruiser', label: '巡航车', color: 'classic' },\n  { value: 'naked', label: '街车', color: 'power' },\n  { value: 'adventure', label: '冒险车', color: 'performance' },\n  { value: 'electric', label: '电动车', color: 'electric' },\n  { value: 'scooter', label: '踏板车', color: 'secondary' },\n  { value: 'dirt', label: '越野车', color: 'warning' },\n]\n\nconst SORT_OPTIONS = [\n  { value: 'popularity', label: '热门程度' },\n  { value: 'price', label: '价格' },\n  { value: 'power', label: '功率' },\n  { value: 'year', label: '年份' },\n  { value: 'rating', label: '评分' },\n]\n\nexport function SearchFilters({\n  availableFilters,\n  onFiltersChange,\n  className\n}: SearchFiltersProps) {\n  const dispatch = useDispatch()\n  const filters = useSelector((state: RootState) => state.filters)\n  \n  const [localSearch, setLocalSearch] = useState(filters.search || '')\n  const [expandedSections, setExpandedSections] = useState({\n    brand: true,\n    category: true,\n    price: false,\n    power: false,\n    features: false,\n  })\n  \n  // 防抖搜索\n  useDebounce(\n    () => {\n      if (localSearch !== filters.search) {\n        dispatch(updateFilters({ search: localSearch }))\n      }\n    },\n    300,\n    [localSearch]\n  )\n  \n  // 监听filters变化，通知父组件\n  useEffect(() => {\n    onFiltersChange?.(filters)\n  }, [filters, onFiltersChange])\n  \n  const handleFilterChange = (key: keyof SearchFiltersType, value: any) => {\n    dispatch(updateFilters({ [key]: value }))\n  }\n  \n  const handleBrandToggle = (brand: string) => {\n    const currentBrands = filters.brand || []\n    const newBrands = currentBrands.includes(brand)\n      ? currentBrands.filter(b => b !== brand)\n      : [...currentBrands, brand]\n    \n    handleFilterChange('brand', newBrands)\n  }\n  \n  const handleCategoryToggle = (category: string) => {\n    const currentCategories = filters.category || []\n    const newCategories = currentCategories.includes(category)\n      ? currentCategories.filter(c => c !== category)\n      : [...currentCategories, category]\n    \n    handleFilterChange('category', newCategories)\n  }\n  \n  const handleClearFilters = () => {\n    setLocalSearch('')\n    dispatch(clearFilters())\n  }\n  \n  const toggleSection = (section: keyof typeof expandedSections) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }))\n  }\n  \n  // 计算活跃的筛选器数量\n  const activeFiltersCount = useMemo(() => {\n    let count = 0\n    if (filters.search) count++\n    if (filters.brand?.length) count += filters.brand.length\n    if (filters.category?.length) count += filters.category.length\n    if (filters.minPrice || filters.maxPrice) count++\n    if (filters.minPower || filters.maxPower) count++\n    if (filters.inStock) count++\n    if (filters.featured) count++\n    if (filters.electric) count++\n    return count\n  }, [filters])\n  \n  const FilterSection = ({ \n    title, \n    sectionKey, \n    children \n  }: { \n    title: string\n    sectionKey: keyof typeof expandedSections\n    children: React.ReactNode \n  }) => (\n    <div className=\"border-b border-neutral-200 last:border-b-0\">\n      <button\n        onClick={() => toggleSection(sectionKey)}\n        className=\"w-full flex items-center justify-between p-4 text-left hover:bg-neutral-50 transition-colors\"\n      >\n        <span className=\"font-medium text-neutral-900\">{title}</span>\n        {expandedSections[sectionKey] ? (\n          <ChevronUp className=\"w-4 h-4 text-neutral-500\" />\n        ) : (\n          <ChevronDown className=\"w-4 h-4 text-neutral-500\" />\n        )}\n      </button>\n      \n      <AnimatePresence>\n        {expandedSections[sectionKey] && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-4 pb-4\">\n              {children}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n  \n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* 搜索框 */}\n      <div className=\"sticky top-0 z-10 bg-white\">\n        <Input\n          placeholder=\"搜索摩托车品牌、型号...\"\n          value={localSearch}\n          onChange={(e) => setLocalSearch(e.target.value)}\n          leftIcon={<Search className=\"w-4 h-4\" />}\n          rightIcon={\n            localSearch && (\n              <X \n                className=\"w-4 h-4 cursor-pointer hover:text-neutral-700\" \n                onClick={() => setLocalSearch('')}\n              />\n            )\n          }\n        />\n      </div>\n      \n      {/* 排序 */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n            排序方式\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            {SORT_OPTIONS.map((option) => (\n              <Button\n                key={option.value}\n                variant={filters.sortBy === option.value ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleFilterChange('sortBy', option.value)}\n                className=\"justify-start\"\n              >\n                {option.label}\n              </Button>\n            ))}\n          </div>\n          \n          <div className=\"mt-3 flex gap-2\">\n            <Button\n              variant={filters.sortOrder === 'asc' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleFilterChange('sortOrder', 'asc')}\n            >\n              升序\n            </Button>\n            <Button\n              variant={filters.sortOrder === 'desc' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleFilterChange('sortOrder', 'desc')}\n            >\n              降序\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* 筛选器 */}\n      <Card>\n        <CardHeader className=\"pb-0\">\n          <CardTitle className=\"text-sm font-medium flex items-center justify-between\">\n            <span className=\"flex items-center gap-2\">\n              <Filter className=\"w-4 h-4\" />\n              筛选器\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"default\" size=\"sm\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </span>\n            {activeFiltersCount > 0 && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleClearFilters}\n                className=\"text-xs\"\n              >\n                清除全部\n              </Button>\n            )}\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"p-0\">\n          {/* 品牌筛选 */}\n          <FilterSection title=\"品牌\" sectionKey=\"brand\">\n            <div className=\"space-y-2\">\n              {availableFilters?.brands?.slice(0, 10).map((brand) => (\n                <label key={brand} className=\"flex items-center gap-2 text-sm\">\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.brand?.includes(brand) || false}\n                    onChange={() => handleBrandToggle(brand)}\n                    className=\"rounded border-neutral-300 text-brand-primary-600 focus:ring-brand-primary-500\"\n                  />\n                  <span className=\"text-neutral-700\">{brand}</span>\n                </label>\n              ))}\n            </div>\n          </FilterSection>\n          \n          {/* 分类筛选 */}\n          <FilterSection title=\"车型分类\" sectionKey=\"category\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              {CATEGORY_OPTIONS.map((category) => (\n                <Button\n                  key={category.value}\n                  variant={filters.category?.includes(category.value) ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => handleCategoryToggle(category.value)}\n                  className=\"justify-start text-xs\"\n                >\n                  {category.label}\n                </Button>\n              ))}\n            </div>\n          </FilterSection>\n          \n          {/* 价格范围 */}\n          <FilterSection title=\"价格范围\" sectionKey=\"price\">\n            <div className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"最低价格\"\n                  value={filters.minPrice || ''}\n                  onChange={(e) => handleFilterChange('minPrice', e.target.value ? Number(e.target.value) : undefined)}\n                  size=\"sm\"\n                />\n                <Input\n                  type=\"number\"\n                  placeholder=\"最高价格\"\n                  value={filters.maxPrice || ''}\n                  onChange={(e) => handleFilterChange('maxPrice', e.target.value ? Number(e.target.value) : undefined)}\n                  size=\"sm\"\n                />\n              </div>\n              \n              {availableFilters?.priceRange && (\n                <div className=\"text-xs text-neutral-500\">\n                  价格范围: ¥{availableFilters.priceRange.min.toLocaleString()} - ¥{availableFilters.priceRange.max.toLocaleString()}\n                </div>\n              )}\n            </div>\n          </FilterSection>\n          \n          {/* 功率范围 */}\n          <FilterSection title=\"功率范围\" sectionKey=\"power\">\n            <div className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"最低功率 (HP)\"\n                  value={filters.minPower || ''}\n                  onChange={(e) => handleFilterChange('minPower', e.target.value ? Number(e.target.value) : undefined)}\n                  size=\"sm\"\n                />\n                <Input\n                  type=\"number\"\n                  placeholder=\"最高功率 (HP)\"\n                  value={filters.maxPower || ''}\n                  onChange={(e) => handleFilterChange('maxPower', e.target.value ? Number(e.target.value) : undefined)}\n                  size=\"sm\"\n                />\n              </div>\n              \n              {availableFilters?.powerRange && (\n                <div className=\"text-xs text-neutral-500\">\n                  功率范围: {availableFilters.powerRange.min}HP - {availableFilters.powerRange.max}HP\n                </div>\n              )}\n            </div>\n          </FilterSection>\n          \n          {/* 其他特性 */}\n          <FilterSection title=\"其他特性\" sectionKey=\"features\">\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center gap-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={filters.inStock || false}\n                  onChange={(e) => handleFilterChange('inStock', e.target.checked)}\n                  className=\"rounded border-neutral-300 text-brand-primary-600 focus:ring-brand-primary-500\"\n                />\n                <span className=\"text-neutral-700\">现货有售</span>\n              </label>\n              \n              <label className=\"flex items-center gap-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={filters.featured || false}\n                  onChange={(e) => handleFilterChange('featured', e.target.checked)}\n                  className=\"rounded border-neutral-300 text-brand-primary-600 focus:ring-brand-primary-500\"\n                />\n                <span className=\"text-neutral-700\">推荐车型</span>\n              </label>\n              \n              <label className=\"flex items-center gap-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={filters.electric || false}\n                  onChange={(e) => handleFilterChange('electric', e.target.checked)}\n                  className=\"rounded border-neutral-300 text-brand-primary-600 focus:ring-brand-primary-500\"\n                />\n                <span className=\"text-neutral-700\">电动摩托车</span>\n              </label>\n            </div>\n          </FilterSection>\n        </CardContent>\n      </Card>\n      \n      {/* 已选筛选器 */}\n      {activeFiltersCount > 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"space-y-2\"\n        >\n          <div className=\"text-sm font-medium text-neutral-700\">已选筛选器:</div>\n          <div className=\"flex flex-wrap gap-2\">\n            {filters.search && (\n              <Badge variant=\"outline\" removable onRemove={() => setLocalSearch('')}>\n                搜索: {filters.search}\n              </Badge>\n            )}\n            \n            {filters.brand?.map((brand) => (\n              <Badge key={brand} variant=\"outline\" removable onRemove={() => handleBrandToggle(brand)}>\n                {brand}\n              </Badge>\n            ))}\n            \n            {filters.category?.map((category) => {\n              const categoryOption = CATEGORY_OPTIONS.find(opt => opt.value === category)\n              return (\n                <Badge \n                  key={category} \n                  variant={categoryOption?.color as any} \n                  removable \n                  onRemove={() => handleCategoryToggle(category)}\n                >\n                  {categoryOption?.label || category}\n                </Badge>\n              )\n            })}\n            \n            {(filters.minPrice || filters.maxPrice) && (\n              <Badge \n                variant=\"outline\" \n                removable \n                onRemove={() => {\n                  handleFilterChange('minPrice', undefined)\n                  handleFilterChange('maxPrice', undefined)\n                }}\n              >\n                价格: {filters.minPrice || 0} - {filters.maxPrice || '∞'}\n              </Badge>\n            )}\n            \n            {(filters.minPower || filters.maxPower) && (\n              <Badge \n                variant=\"outline\" \n                removable \n                onRemove={() => {\n                  handleFilterChange('minPower', undefined)\n                  handleFilterChange('maxPower', undefined)\n                }}\n              >\n                功率: {filters.minPower || 0} - {filters.maxPower || '∞'}HP\n              </Badge>\n            )}\n          </div>\n        </motion.div>\n      )}\n    </div>\n  )\n}