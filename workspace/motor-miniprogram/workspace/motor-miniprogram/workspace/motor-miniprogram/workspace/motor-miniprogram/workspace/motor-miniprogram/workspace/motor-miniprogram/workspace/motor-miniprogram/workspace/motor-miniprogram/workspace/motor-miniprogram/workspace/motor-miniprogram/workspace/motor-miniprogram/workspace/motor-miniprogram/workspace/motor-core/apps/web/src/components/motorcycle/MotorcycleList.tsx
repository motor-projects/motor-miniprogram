import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Grid, List, Loader2, RefreshCw } from 'lucide-react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver'\nimport { MotorcycleCard } from './MotorcycleCard'\nimport { Button } from '../ui/Button'\nimport { Badge } from '../ui/Badge'\nimport { RootState } from '../../store'\nimport { setViewMode } from '../../store/slices/uiSlice'\nimport { Motorcycle, SearchFilters } from '../../types'\nimport { cn } from '../../utils/cn'\n\ninterface MotorcycleListProps {\n  motorcycles: Motorcycle[]\n  loading?: boolean\n  hasNextPage?: boolean\n  onLoadMore?: () => void\n  totalCount?: number\n  filters?: SearchFilters\n  className?: string\n}\n\nexport function MotorcycleList({\n  motorcycles,\n  loading = false,\n  hasNextPage = false,\n  onLoadMore,\n  totalCount,\n  filters,\n  className\n}: MotorcycleListProps) {\n  const dispatch = useDispatch()\n  const { viewMode } = useSelector((state: RootState) => state.ui)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [refreshing, setRefreshing] = useState(false)\n  \n  // 无限滚动\n  const isIntersecting = useIntersectionObserver(loadMoreRef, {\n    threshold: 0.1,\n    rootMargin: '100px'\n  })\n  \n  useEffect(() => {\n    if (isIntersecting && hasNextPage && !loading && onLoadMore) {\n      onLoadMore()\n    }\n  }, [isIntersecting, hasNextPage, loading, onLoadMore])\n  \n  const handleRefresh = useCallback(async () => {\n    setRefreshing(true)\n    // 模拟刷新\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    setRefreshing(false)\n  }, [])\n  \n  const handleViewModeChange = (mode: 'grid' | 'list') => {\n    dispatch(setViewMode(mode))\n  }\n  \n  // 容器动画变体\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  }\n  \n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.3\n      }\n    }\n  }\n  \n  // 如果正在加载且没有数据，显示骨架屏\n  if (loading && motorcycles.length === 0) {\n    return (\n      <div className={cn('space-y-4', className)}>\n        {/* 工具栏骨架 */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"h-6 bg-neutral-200 rounded w-32 animate-pulse\" />\n          <div className=\"flex gap-2\">\n            <div className=\"h-9 w-9 bg-neutral-200 rounded animate-pulse\" />\n            <div className=\"h-9 w-9 bg-neutral-200 rounded animate-pulse\" />\n          </div>\n        </div>\n        \n        {/* 内容骨架 */}\n        <div className={cn(\n          'grid gap-6',\n          viewMode === 'grid' \n            ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'\n            : 'grid-cols-1'\n        )}>\n          {Array.from({ length: 8 }).map((_, index) => (\n            <div key={index} className=\"bg-neutral-200 rounded-lg animate-pulse\">\n              <div className={cn(\n                viewMode === 'grid' ? 'aspect-[4/3]' : 'h-24'\n              )} />\n              <div className=\"p-4 space-y-2\">\n                <div className=\"h-4 bg-neutral-300 rounded\" />\n                <div className=\"h-3 bg-neutral-300 rounded w-2/3\" />\n                <div className=\"h-3 bg-neutral-300 rounded w-1/2\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n  \n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* 工具栏 */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm text-neutral-600\">\n            {totalCount !== undefined ? (\n              <span>\n                共找到 <span className=\"font-semibold text-neutral-900\">{totalCount.toLocaleString()}</span> 款摩托车\n              </span>\n            ) : (\n              <span>显示 {motorcycles.length} 款摩托车</span>\n            )}\n          </div>\n          \n          {/* 活跃筛选器 */}\n          {filters && (\n            <div className=\"flex items-center gap-2\">\n              {filters.search && (\n                <Badge variant=\"outline\" size=\"sm\">\n                  搜索: {filters.search}\n                </Badge>\n              )}\n              {filters.brand?.slice(0, 2).map(brand => (\n                <Badge key={brand} variant=\"outline\" size=\"sm\">\n                  {brand}\n                </Badge>\n              ))}\n              {filters.brand && filters.brand.length > 2 && (\n                <Badge variant=\"outline\" size=\"sm\">\n                  +{filters.brand.length - 2}\n                </Badge>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleRefresh}\n            disabled={refreshing}\n            className=\"text-neutral-500 hover:text-neutral-700\"\n          >\n            <RefreshCw className={cn('w-4 h-4', refreshing && 'animate-spin')} />\n          </Button>\n          \n          <div className=\"flex border border-neutral-200 rounded-md overflow-hidden\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'ghost'}\n              size=\"icon\"\n              onClick={() => handleViewModeChange('grid')}\n              className=\"rounded-none border-0\"\n            >\n              <Grid className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"icon\"\n              onClick={() => handleViewModeChange('list')}\n              className=\"rounded-none border-0 border-l border-neutral-200\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* 摩托车列表 */}\n      {motorcycles.length === 0 ? (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center py-16\"\n        >\n          <div className=\"w-24 h-24 mx-auto mb-4 text-neutral-300\">\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={1}\n                d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </div>\n          <h3 className=\"text-lg font-medium text-neutral-900 mb-2\">\n            没有找到匹配的摩托车\n          </h3>\n          <p className=\"text-neutral-600 mb-4\">\n            尝试调整筛选条件或使用不同的搜索关键词\n          </p>\n          <Button\n            variant=\"outline\"\n            onClick={() => window.location.reload()}\n          >\n            重新搜索\n          </Button>\n        </motion.div>\n      ) : (\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className={cn(\n            'grid gap-6',\n            viewMode === 'grid' \n              ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'\n              : 'grid-cols-1'\n          )}\n        >\n          <AnimatePresence mode=\"popLayout\">\n            {motorcycles.map((motorcycle, index) => (\n              <motion.div\n                key={motorcycle._id}\n                variants={itemVariants}\n                layout\n                className=\"w-full\"\n              >\n                <MotorcycleCard\n                  motorcycle={motorcycle}\n                  viewMode={viewMode}\n                  className=\"h-full\"\n                />\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </motion.div>\n      )}\n      \n      {/* 加载更多 */}\n      {motorcycles.length > 0 && (\n        <div ref={loadMoreRef} className=\"flex justify-center py-8\">\n          {loading ? (\n            <div className=\"flex items-center gap-2 text-neutral-600\">\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n              <span>正在加载更多...</span>\n            </div>\n          ) : hasNextPage ? (\n            <Button\n              variant=\"outline\"\n              onClick={onLoadMore}\n              className=\"min-w-[120px]\"\n            >\n              加载更多\n            </Button>\n          ) : motorcycles.length > 0 ? (\n            <div className=\"text-sm text-neutral-500\">\n              已显示全部结果\n            </div>\n          ) : null}\n        </div>\n      )}\n      \n      {/* 回到顶部 */}\n      {motorcycles.length > 12 && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"fixed bottom-8 right-8 z-50\"\n        >\n          <Button\n            variant=\"default\"\n            size=\"icon\"\n            onClick={() => {\n              window.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n              })\n            }}\n            className=\"rounded-full shadow-lg\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M5 10l7-7m0 0l7 7m-7-7v18\"\n              />\n            </svg>\n          </Button>\n        </motion.div>\n      )}\n    </div>\n  )\n}