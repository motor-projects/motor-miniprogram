import { Motorcycle } from '../types'\n\n/**\n * 格式化价格显示\n */\nexport function formatPrice(price: Motorcycle['price']): string {\n  if (!price?.msrp) return '价格面议'\n  \n  const { msrp, currency = 'CNY' } = price\n  \n  const formatters: Record<string, Intl.NumberFormat> = {\n    CNY: new Intl.NumberFormat('zh-CN', {\n      style: 'currency',\n      currency: 'CNY',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }),\n    USD: new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }),\n    EUR: new Intl.NumberFormat('de-DE', {\n      style: 'currency',\n      currency: 'EUR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }),\n  }\n  \n  const formatter = formatters[currency] || formatters.CNY\n  return formatter.format(msrp)\n}\n\n/**\n * 格式化功率显示\n */\nexport function formatPower(power: Motorcycle['performance']['power']): string {\n  if (!power) return ''\n  \n  if (power.hp && power.kw) {\n    return `${power.hp}HP / ${power.kw}kW`\n  }\n  \n  if (power.hp) {\n    return `${power.hp}HP`\n  }\n  \n  if (power.kw) {\n    return `${power.kw}kW`\n  }\n  \n  return ''\n}\n\n/**\n * 格式化扭矩显示\n */\nexport function formatTorque(torque: Motorcycle['performance']['torque']): string {\n  if (!torque) return ''\n  \n  if (torque.nm && torque.lbft) {\n    return `${torque.nm}Nm / ${torque.lbft}lb-ft`\n  }\n  \n  if (torque.nm) {\n    return `${torque.nm}Nm`\n  }\n  \n  if (torque.lbft) {\n    return `${torque.lbft}lb-ft`\n  }\n  \n  return ''\n}\n\n/**\n * 格式化重量显示\n */\nexport function formatWeight(weight: Motorcycle['dimensions']['weight'], unit: 'kg' | 'lb' = 'kg'): string {\n  if (!weight) return ''\n  \n  const kg = weight.wet || weight.dry\n  if (!kg) return ''\n  \n  if (unit === 'lb') {\n    const lb = Math.round(kg * 2.20462)\n    return `${lb}lb`\n  }\n  \n  return `${kg}kg`\n}\n\n/**\n * 格式化排量显示\n */\nexport function formatDisplacement(displacement: number): string {\n  if (displacement >= 1000) {\n    return `${(displacement / 1000).toFixed(1)}L`\n  }\n  return `${displacement}cc`\n}\n\n/**\n * 格式化燃油经济性显示\n */\nexport function formatFuelEconomy(fuelEconomy: Motorcycle['performance']['fuelEconomy']): string {\n  if (!fuelEconomy) return ''\n  \n  if (fuelEconomy.combined) {\n    return `${fuelEconomy.combined}L/100km`\n  }\n  \n  if (fuelEconomy.city && fuelEconomy.highway) {\n    return `市区 ${fuelEconomy.city}L/100km / 高速 ${fuelEconomy.highway}L/100km`\n  }\n  \n  return ''\n}\n\n/**\n * 格式化座高显示\n */\nexport function formatSeatHeight(height: number, unit: 'mm' | 'in' = 'mm'): string {\n  if (unit === 'in') {\n    const inches = Math.round(height / 25.4 * 10) / 10\n    return `${inches}in`\n  }\n  return `${height}mm`\n}\n\n/**\n * 格式化加速时间显示\n */\nexport function formatAcceleration(acceleration: Motorcycle['performance']['acceleration']): string {\n  if (!acceleration) return ''\n  \n  const parts: string[] = []\n  \n  if (acceleration.zeroToSixty) {\n    parts.push(`0-60mph: ${acceleration.zeroToSixty}s`)\n  }\n  \n  if (acceleration.zeroToHundred) {\n    parts.push(`0-100km/h: ${acceleration.zeroToHundred}s`)\n  }\n  \n  if (acceleration.quarterMile) {\n    parts.push(`1/4英里: ${acceleration.quarterMile}s`)\n  }\n  \n  return parts.join(' | ')\n}\n\n/**\n * 格式化年份范围\n */\nexport function formatYearRange(startYear: number, endYear?: number): string {\n  if (!endYear || endYear === startYear) {\n    return startYear.toString()\n  }\n  return `${startYear}-${endYear}`\n}\n\n/**\n * 格式化数字（千分位）\n */\nexport function formatNumber(num: number): string {\n  return new Intl.NumberFormat('zh-CN').format(num)\n}\n\n/**\n * 格式化百分比\n */\nexport function formatPercentage(value: number, total: number): string {\n  const percentage = Math.round((value / total) * 100)\n  return `${percentage}%`\n}\n\n/**\n * 格式化日期\n */\nexport function formatDate(date: string | Date, options?: Intl.DateTimeFormatOptions): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date\n  \n  const defaultOptions: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  }\n  \n  return new Intl.DateTimeFormat('zh-CN', { ...defaultOptions, ...options }).format(dateObj)\n}\n\n/**\n * 格式化相对时间\n */\nexport function formatRelativeTime(date: string | Date): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date\n  const now = new Date()\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000)\n  \n  const intervals = [\n    { label: '年', seconds: 31536000 },\n    { label: '个月', seconds: 2592000 },\n    { label: '天', seconds: 86400 },\n    { label: '小时', seconds: 3600 },\n    { label: '分钟', seconds: 60 },\n  ]\n  \n  for (const interval of intervals) {\n    const count = Math.floor(diffInSeconds / interval.seconds)\n    if (count > 0) {\n      return `${count}${interval.label}前`\n    }\n  }\n  \n  return '刚刚'\n}\n\n/**\n * 截断文本\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text\n  return text.slice(0, maxLength) + '...'\n}\n\n/**\n * 格式化文件大小\n */\nexport function formatFileSize(bytes: number): string {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB']\n  if (bytes === 0) return '0 Bytes'\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return `${Math.round(bytes / Math.pow(1024, i) * 100) / 100} ${sizes[i]}`\n}\n\n/**\n * 生成SEO友好的slug\n */\nexport function generateSlug(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\u4e00-\\u9fa5]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n}\n\n/**\n * 验证电子邮件格式\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n/**\n * 验证密码强度\n */\nexport function validatePasswordStrength(password: string): {\n  isValid: boolean\n  score: number\n  feedback: string[]\n} {\n  const feedback: string[] = []\n  let score = 0\n  \n  if (password.length >= 8) {\n    score += 1\n  } else {\n    feedback.push('密码至少需要8个字符')\n  }\n  \n  if (/[a-z]/.test(password)) {\n    score += 1\n  } else {\n    feedback.push('需要包含小写字母')\n  }\n  \n  if (/[A-Z]/.test(password)) {\n    score += 1\n  } else {\n    feedback.push('需要包含大写字母')\n  }\n  \n  if (/\\d/.test(password)) {\n    score += 1\n  } else {\n    feedback.push('需要包含数字')\n  }\n  \n  if (/[^\\w\\s]/.test(password)) {\n    score += 1\n  } else {\n    feedback.push('需要包含特殊字符')\n  }\n  \n  return {\n    isValid: score >= 3,\n    score,\n    feedback\n  }\n}